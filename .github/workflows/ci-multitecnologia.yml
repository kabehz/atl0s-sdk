name: CI/CD MultitecnologÃ­a

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changes: ${{ steps.detect.outputs.changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect Changes
        id: detect
        run: |
          python scripts/detect_changes.py
          echo "CHANGES=$(cat changes_detected.json | jq -c)" >> $GITHUB_ENV
        shell: bash

  generate-matrix:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: ${{ fromJson(needs.detect-changes.outputs.changes).src != [] || fromJson(needs.detect-changes.outputs.changes).tests != [] }}
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate GHA Matrix
        id: set-matrix
        run: |
          python scripts/generate_gha_matrix.py
          echo "MATRIX=$(cat gha_matrix.json)" >> $GITHUB_ENV
        shell: bash

  ci_technology:
    needs: generate-matrix
    runs-on: ubuntu-latest
    if: ${{ needs.generate-matrix.outputs.matrix != '' }}
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix).include }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        if: ${{ matrix.technology == 'python' }}
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"

      - name: Install Python deps
        if: ${{ matrix.technology == 'python' }}
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install -r src/python/${{ matrix.component }}/requirements.txt

      - name: Run Python Tests
        if: ${{ matrix.technology == 'python' }}
        run: |
          pytest tests/${{ matrix.technology }}/${{ matrix.component }}/ --junitxml=results.xml

      - name: Run Bash Tests
        if: ${{ matrix.technology == 'bash' }}
        run: bash tests/${{ matrix.technology }}/${{ matrix.component }}/test_scripts.sh > results.log

      - name: Validate Terraform
        if: ${{ matrix.technology == 'terraform' }}
        run: |
          cd src/iac/terraform/${{ matrix.component }}
          terraform init
          terraform validate > results.log

      - name: Ansible Syntax Check
        if: ${{ matrix.technology == 'ansible' }}
        run: |
          ansible-playbook --syntax-check src/iac/ansible/${{ matrix.component }}/playbook.yml > results.log

      - name: Upload Test Results
        uses: actions/upload-artifact@v2
        with:
          name: results-${{ matrix.technology }}-${{ matrix.component }}
          path: results.xml

  update-mkdocs:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: ${{ needs.detect-changes.outputs.changes != '' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update mkdocs
        run: python scripts/generate_mkdocs.py

      - name: Commit updated mkdocs.yml
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add mkdocs.yml
          git commit -m "ðŸ”„ ActualizaciÃ³n automÃ¡tica de mkdocs.yml"
          git push
